apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'jacoco'


jacoco {
    toolVersion = "$jacocoVersion"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def javaClasses = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def kotlinClasses = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def javaSrc = "$project.projectDir/src/main/java"
    def kotlinSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories = files([javaSrc, kotlinSrc])
    classDirectories = files([javaClasses, kotlinClasses])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}


android {
    signingConfigs {
        release
    }
    compileSdkVersion 28
    defaultConfig {
        applicationId "mobi.devs.codebuildshipke"
        minSdkVersion 17
        targetSdkVersion 28
        versionCode 28
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.release
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            zipAlignEnabled true
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }

    def isRunningOnTravis = System.getenv("CI") == "true"

    if (isRunningOnTravis) {
        // configure keystore
        signingConfigs.release.storeFile = file("../android-release.jks")
        signingConfigs.release.storePassword = System.getenv("keystore_password")
        signingConfigs.release.keyAlias = System.getenv("keystore_alias")
        signingConfigs.release.keyPassword = System.getenv("keystore_alias_password")
    } else {
        def keystorePropertiesFile = rootProject.file("keystore.properties")
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream((keystorePropertiesFile)))
        signingConfigs.release.storeFile = file(keystoreProperties['storeFile'])
        signingConfigs.release.storePassword = keystoreProperties['storePassword']
        signingConfigs.release.keyAlias = keystoreProperties['keyAlias']
        signingConfigs.release.keyPassword = keystoreProperties['keyPassword']
    }

    buildToolsVersion '28.0.2'
    productFlavors {
    }
    splits {
        abi {
            enable gradle.startParameter.taskNames.contains(":app:assembleRelease") || gradle.startParameter.taskNames.contains("assembleRelease")
            //enable gradle.startParameter.taskNames.contains("Release")
            reset()
            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            //include 'armeabi-v7a', 'arm64-v8a'
            universalApk true
        }

        //density {
        //    enable true
        //    exclude 'xxxhdpi', 'tvdpi', 'ldpi', 'hdpi'
        //}
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha2'
    implementation 'androidx.cardview:cardview:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0-alpha4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha4'
    androidTestImplementation 'androidx.test:rules:1.1.0-alpha4'
    androidTestUtil 'androidx.test:orchestrator:1.1.0-alpha4'
}
